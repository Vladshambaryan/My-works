{
	"info": {
		"_postman_id": "54a217dc-14c3-4e9a-ab0c-e9869e3e1674",
		"name": "002_Automation_CA-Marketing ENV PARAM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27779519"
	},
	"item": [
		{
			"name": "Add new postal address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 2000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
							"\r",
							"tests['Response Time is Acceptable'] = responseTime < 1500;\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"ID\", jsonData.id);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"ID\");\r",
							"\r",
							"pm.environment.unset(\"COMPANY\");\r",
							"\r",
							"pm.environment.set(\"COMPANY\", \"Apple-\" + new Date().getTime());\r",
							"\r",
							"//pm.environment.set(\"PHONENUMBER\", Math.floor(Math.random() * 9999999999));\r",
							"\r",
							"//pm.environment.set(\"ZIPCODE\", Math.floor(Math.random() * 99999));\r",
							"\r",
							"//pm.environment.set(\"QTY\", Math.floor(Math.random() * 101));\r",
							"\r",
							"//pm.environment.set(\"SHIPDATE\", new Date());\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"let FN = [\"VLAD\", \"DAVID\", \"MIQAEL\", \"RAFAEL\", \"MARIAM\", \"MERINE\", \"NARINE\", \"ERNA\", \"ELIZA\"];\r",
							"let randomFN = FN[Math.floor(Math.random() * FN.length)];\r",
							"pm.environment.set(\"FN\", randomFN);\r",
							"\r",
							"\r",
							"let LN = [\"BUSH\", \"TRAMP\", \"SHAMBARYAN\", \"REVAZYAN\", \"GRIQORYAN\", \"KALENDAREV\", \"EFREMOV\", \"BROUN\", \"DANIELYAN\"];\r",
							"let randomLN = LN[Math.floor(Math.random() * LN.length)];\r",
							"pm.environment.set(\"LN\", randomLN);\r",
							"\r",
							"\r",
							"\r",
							"let COUNTRY = [\"USA\", \"ARMENIA\", \"GEORGIA\", \"UKRAINA\", \"SPANISH\", \"HROME\", \"CHINA\", \"JAPAN\", \"ISRAEL\"];\r",
							"let randomCOUNTRY = COUNTRY[Math.floor(Math.random() * COUNTRY.length)];\r",
							"pm.environment.set(\"COUNTRY\", randomCOUNTRY);\r",
							"\r",
							"\r",
							"\r",
							"let CITY = [\"YEREYAN\", \"DILIJAN\", \"SEVAN\", \"WASHINGTON\", \"MAYAMI\", \"BRUKLIN\", \"MEXICO\", \"MOSCOW\", \"KIEV\"];\r",
							"let randomCITY = CITY[Math.floor(Math.random() * CITY.length)];\r",
							"pm.environment.set(\"CITY\", randomCITY);\r",
							"\r",
							"\r",
							"\r",
							"let COMPANY = [\"GLOBBING\", \"GOOGLE\", \"YAHOO\", \"YANDEX\", \"EBAY\", \"ALIBABA\", \"TESLA\", \"BMW\", \"LEXUS\"];\r",
							"let randomCOMPANY = COMPANY[Math.floor(Math.random() * COMPANY.length)];\r",
							"pm.environment.set(\"COMPANY\", randomCOMPANY);\r",
							"\r",
							"\r",
							"let ZIPCODE = [\"12345\", \"54321\", \"67890\", \"09876\", \"12346\", \"24680\", \"08642\", \"13052\", \"10385\"];\r",
							"let randomZIPCODE = ZIPCODE[Math.floor(Math.random() * ZIPCODE.length)];\r",
							"pm.environment.set(\"ZIPCODE\", randomZIPCODE);\r",
							"\r",
							"let PHONENUMBER = [\"0987654321\", \"1357907542\", \"1111111111\", \"2222222222\", \"3333333333\", \"4444444444\", \"5555555555\", \"7777777777\", \"8888888888\"];\r",
							"let randomPHONENUMBER = PHONENUMBER[Math.floor(Math.random() * PHONENUMBER.length)];\r",
							"pm.environment.set(\"PHONENUMBER\", randomPHONENUMBER);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FN}}\",\r\n            \"lastName\": \"{{LN}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": \"c87ce171-2872-4a91-a71b-47d03e1136e5\",\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"b11\",\r\n        \"addressLine2\": \"b12\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}} \",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": null,\r\n        \"zipCode\": \"{{ZIPCODE}}\",\r\n        \"phoneNumber\": \"{{PHONENUMBER}}\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys - value\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});   \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show default  address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							" \r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"}); \r",
							"\r",
							"\r",
							"pm.test(\"firstName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"lastName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"country is correct\", function () {\r",
							"    var jsonData = pm.response.json();    \r",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"city is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));\r",
							"}); \r",
							"pm.test(\"ZIPCODE is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.zipCode).to.eql(pm.environment.get(\"ZIPCODE\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"company is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"phoneNumber is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONENUMBER\"));\r",
							"}); \r",
							"pm.test(\"Keys-value is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"b11\");\r",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"b12\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/get-default-address",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"get-default-address"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All  addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 12000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(12000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys - value\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"FN\"));\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LN\"));\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"CITY\"));\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ZIPCODE\"));\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COMPANY\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific  Addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys - value\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"}); \r",
							"\r",
							"\r",
							"pm.test(\"firstName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"lastName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"country is correct\", function () {\r",
							"    var jsonData = pm.response.json();    \r",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"city is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));\r",
							"}); \r",
							"pm.test(\"ZIPCODE is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.zipCode).to.eql(pm.environment.get(\"ZIPCODE\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"company is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"phoneNumber is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONENUMBER\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"b11\");\r",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"b12\");\r",
							"});\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify existing  address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys - value\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let FN = [\"VLAD\", \"DAVID\", \"MIQAEL\", \"RAFAEL\", \"MARIAM\", \"MERINE\", \"NARINE\", \"ERNA\", \"ELIZA\"];\r",
							"let randomFN = FN[Math.floor(Math.random() * FN.length)];\r",
							"pm.environment.set(\"FN\", randomFN);\r",
							"\r",
							"\r",
							"let LN = [\"BUSH\", \"TRAMP\", \"SHAMBARYAN\", \"REVAZYAN\", \"GRIQORYAN\", \"KALENDAREV\", \"EFREMOV\", \"BROUN\", \"DANIELYAN\"];\r",
							"let randomLN = LN[Math.floor(Math.random() * LN.length)];\r",
							"pm.environment.set(\"LN\", randomLN);\r",
							"\r",
							"\r",
							"\r",
							"let COUNTRY = [\"USA\", \"ARMENIA\", \"GEORGIA\", \"UKRAINA\", \"SPANISH\", \"HROME\", \"CHINA\", \"JAPAN\", \"ISRAEL\"];\r",
							"let randomCOUNTRY = COUNTRY[Math.floor(Math.random() * COUNTRY.length)];\r",
							"pm.environment.set(\"COUNTRY\", randomCOUNTRY);\r",
							"\r",
							"\r",
							"\r",
							"let CITY = [\"YEREYAN\", \"DILIJAN\", \"SEVAN\", \"WASHINGTON\", \"MAYAMI\", \"BRUKLIN\", \"MEXICO\", \"MOSCOW\", \"KIEV\"];\r",
							"let randomCITY = CITY[Math.floor(Math.random() * CITY.length)];\r",
							"pm.environment.set(\"CITY\", randomCITY);\r",
							"\r",
							"\r",
							"\r",
							"let COMPANY = [\"GLOBBING\", \"GOOGLE\", \"YAHOO\", \"YANDEX\", \"EBAY\", \"ALIBABA\", \"TESLA\", \"BMW\", \"LEXUS\"];\r",
							"let randomCOMPANY = COMPANY[Math.floor(Math.random() * COMPANY.length)];\r",
							"pm.environment.set(\"COMPANY\", randomCOMPANY);\r",
							"\r",
							"\r",
							"let ZIPCODE = [\"12345\", \"54321\", \"67890\", \"09876\", \"12346\", \"24680\", \"08642\", \"13052\", \"10385\"];\r",
							"let randomZIPCODE = ZIPCODE[Math.floor(Math.random() * ZIPCODE.length)];\r",
							"pm.environment.set(\"ZIPCODE\", randomZIPCODE);\r",
							"\r",
							"let PHONENUMBER = [\"0987654321\", \"1357907542\", \"1111111111\", \"2222222222\", \"3333333333\", \"4444444444\", \"5555555555\", \"7777777777\", \"8888888888\"];\r",
							"let randomPHONENUMBER = PHONENUMBER[Math.floor(Math.random() * PHONENUMBER.length)];\r",
							"pm.environment.set(\"PHONENUMBER\", randomPHONENUMBER);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"id\": \"08cc31c5-a42e-4452-b7a3-558f43fdbfec\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FN}}\",\r\n            \"lastName\": \"{{LN}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"111STREET\",\r\n        \"addressLine2\": \"b13\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": null,\r\n        \"zipCode\": \"{{ZIPCODE}}\",\r\n        \"phoneNumber\": \"{{PHONENUMBER}}\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": true,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  SpecifIc Updated address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys - value\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"}); \r",
							"\r",
							"\r",
							"pm.test(\"firstName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"lastName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"country is correct\", function () {\r",
							"    var jsonData = pm.response.json();    \r",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"city is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));\r",
							"}); \r",
							"pm.test(\"ZIPCODE is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.zipCode).to.eql(pm.environment.get(\"ZIPCODE\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"company is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));\r",
							"}); \r",
							"\r",
							"pm.test(\"phoneNumber is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONENUMBER\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Keys-value is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"b13\");\r",
							"});\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = false;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = true;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = false;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"Order has been deleted, OK\", function () {\r",
							"    pm.response.to.be.an('object');\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Specific Deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = false;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = true;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;    \r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = false;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = true;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.details).to.be.a(\"object\");\r",
							"    pm.expect(jsonData.details.cant_find).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address  2 nd time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = false;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = true;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;    \r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = false;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = true;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.details).to.be.a(\"object\");\r",
							"    pm.expect(jsonData.details.cant_find).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Deleted address by default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = false;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = true;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;    \r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = false;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = true;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.details).to.be.a(\"object\");\r",
							"    pm.expect(jsonData.details.cant_find).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify depleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    tests[\"Backend is available, response code is 200\"] = false;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad Request is OK\"] = true;    \r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;    \r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"switch (responseCode.code) {\r",
							"    case 200:\r",
							"        tests[\"200 ok. The request has succeeded\"] = false;\r",
							"        break;\r",
							"    case 404:\r",
							"        tests[\"404 Not found\"] = false;\r",
							"        break;\r",
							"    case 400:\r",
							"        tests[\"400 Bad Request\"] = true;\r",
							"        break;\r",
							"    case 401:\r",
							"        tests[\"401 BUnauthorized\"] = false;\r",
							"        break;\r",
							"    case 500:\r",
							"        tests[\"500 Internal Server Error\"] = false;\r",
							"        break;\r",
							"    case 503:\r",
							"        tests[\"503 Server unavailable\"] = false;\r",
							"        break;\r",
							"    case 502:\r",
							"        tests[\"502 bad gateway\"] = false;\r",
							"        break;\r",
							"    case 599:\r",
							"        tests[\"599 Network connect timeout error\"] = false;\r",
							"        break;\r",
							"    case 408:\r",
							"        tests[\"408 Request is timeout\"] = false;\r",
							"        break;\r",
							"    default:\r",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response Time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 7000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(7000);\r",
							"});\r",
							"\r",
							"pm.test(\"ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys-value is correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.details).to.be.a(\"object\");\r",
							"    pm.expect(jsonData.details.cant_find).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"\tpm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Enite Header Keys-Values is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"id\": \"08cc31c5-a42e-4452-b7a3-558f43fdbfec\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FN_NEW}}\",\r\n            \"lastName\": \"{{LN_NEW}}\"\r\n        },\r\n        \"company\": \"{{COMPANY_NEW}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{ADR_NEW}}\",\r\n        \"addressLine2\": \"b13\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"Yerevan\",\r\n        \"country\": \"ARM\",\r\n        \"subdivision\": null,\r\n        \"zipCode\": \"00766\",\r\n        \"phoneNumber\": \"+777-777-7777\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": true,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "cA2SgWKRe4hJFMgbTZQ1hVqvuR6F89tLrPrkJt7QVbI.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTA5LTExVDA3OjUzOjM1Ljc2MloiLCJ1aWQiOiJlZmRhMzYyMy0xY2JmLTRlODMtODkxYi1iZTgxNTFmNTA1NWQiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjFjNzJmM2JjLTc2OTUtNGZiYS1iNzVmLWRlMzljN2I5ODEyMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0wOS0xMVQxMTo1MzozNS43NjJaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}